pipeline temperaturePipeline {

    tempExtractor
        -> tempZipInterpreter
        -> tempFilePicker
        -> tempTextFileInterpreter
        -> tempCSVInterpreter
        -> headerRename
        -> batteryHeaderRename
        -> tempTableInterpretor
        -> tempToFahrenheit
        -> batteryTempToFahrenheit
        -> tempLoader;

    block tempExtractor oftype HttpExtractor {
		url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
	}

    block tempZipInterpreter oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    block tempFilePicker oftype FilePicker {
        path:'/data.csv';
    }

	// Interpreter for text files
	block tempTextFileInterpreter oftype TextFileInterpreter {}

	//Interpreter for CSV
	block tempCSVInterpreter oftype CSVInterpreter {
		delimiter: ";";
	}

    block headerRename oftype CellWriter {
        at: range A1:E1;
        write: ["id", "producer","model","month","temperature"];
    }

    block batteryHeaderRename oftype CellWriter {
        at: cell J1;
        write:["battery_temperature"];
    }

    block tempTableInterpretor oftype TableInterpreter {
        header:true;
        columns: [
            "id" oftype PostiveInteger,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype MonthType,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal
        ];
    }


 transform CelsiusToFahrenheit {
   from Celsius oftype decimal;
   to Fahrenheit oftype decimal;

   Fahrenheit: (Celsius * 9/5) + 32;
 }

 block tempToFahrenheit oftype TableTransformer {
   inputColumns: ['temperature'];
   outputColumn: 'temperature';
   uses: CelsiusToFahrenheit;
 }
 
 block batteryTempToFahrenheit oftype TableTransformer {
        inputColumns: ['battery_temperature'];
        outputColumn: 'battery_temperature';
        uses: CelsiusToFahrenheit;
    }


    block tempLoader oftype SQLiteLoader {
        table:'temperatures';
        file:'temperatures.sqlite';
    }

    constraint PositiveConstraint on integer:
        value >= 0;

    valuetype PostiveInteger oftype integer {
        constraints: [PositiveConstraint];
    }

    constraint MonthConstraint on integer:
        value >= 1 and value <= 12;
    
    valuetype MonthType oftype integer {
        constraints:[MonthConstraint];
    }
}